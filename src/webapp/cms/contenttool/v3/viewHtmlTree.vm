<?xml version="1.0" encoding="UTF-8"?> 
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html>
<head> 
	<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
	<meta http-equiv="Expires" content="Tue, 01 Jan 1980 1:00:00 GMT" />
	<meta http-equiv="Cache-Control" content="no-cache" />
	<meta http-equiv="Pragma" content="no-cache" />
	
	<title>Menus</title>

	#includeLatestJQuery()

	<script type="text/javascript">
	<!-- 
		var cssFile = "script/menu/skins/winclassic.css";
		document.write("<link type=\"text/css\" rel=\"StyleSheet\" href=\"" + cssFile + "\" />" );

		var languageCode = "$languageCode";
		
		// OTHER STUFF
		function syncWithTree(path)
		{
			//alert("path:" + path);
			#if($treeMode == "classic")
			var pathArr = path.split(',');
			// var exp = "$exp";
			var exp = "";
			for(i=0;i<pathArr.length;i++)
			{
				exp = exp + "/" + pathArr[i] + "/";
			}
			document.location.href="ViewContentHtmlTree.action?exp=" + exp + "&repositoryId=${repositoryId}&select=" + pathArr[pathArr.length-1];
			#else
			var pathArr = path.split(',');
			syncWithTreeRec(pathArr, 0);
			#end
		}
		function syncWithTreeRec(pathArr, level)
		{
			if(pathArr.length <= 2)
			{
				var node = tree.getNodeWithMyId(pathArr[0]);
				var id = pathArr[pathArr.length -1];
				selectWhenLoaded(node, id);
				return;
			}
		
			if(level >= pathArr.length -1) 
			{
				var node = tree.getNodeWithMyId(pathArr[pathArr.length -2]);
				var id = pathArr[pathArr.length-1];
				selectWhenLoaded(node, id);
				return;
			}
			
			var node = tree.getNodeWithMyId(pathArr[level]);

			if(!node.loading) node.expand();
			if(node.loading) 
			{
				window.setTimeout(function () {
					syncWithTreeRec(pathArr, level);
				}, 10);
			}
			else
			{
				syncWithTreeRec(pathArr, level+1);
			}
		}
		
		
		function refreshTreeNode(contentId, changeTypeId, addedContentId)
		{
			//alert("contentId:" + contentId + ":" + changeTypeId);
			if(changeTypeId == 4)
			{
				if(contentId == tree.myId) 
				{
					document.location.reload();
					return;
				}
				var node = tree.getNodeWithMyId(contentId);
				if(node)
				{
					node.reload();
					selectWhenLoaded(node, contentId);
				}
				
				return;
			}

			if(changeTypeId == 3)
			{
				var node = tree.getNodeWithMyId(addedContentId);
				try
				{
					node.parentNode.reload();
				}
				catch(e)
				{
					//alert("Error:" + e);
				}			
			}			
			
			var parentNode = tree.getNodeWithMyId(contentId);
			if(changeTypeId == 1) 
			{
				parentNode = parentNode.parentNode;
				addedContentId = contentId;
			}

			if(!parentNode || parentNode.myId == tree.myId) 
			{
				//alert("" + document.location.href.replace(/&select=.*/g,"") + "&select=" + contentId);
				document.location.href = document.location.href.replace(/&select=.*/g,"") + "&select=" + contentId
				//document.location.reload();
				return;
			}
			parentNode.expand();
			parentNode.reload();
			selectWhenLoaded(parentNode, addedContentId);
		}
		
		function selectWhenLoaded(parentNode, contentId)
		{
			//alert("parentNode:" + parentNode);
			//alert("contentId" + contentId);
			if(parentNode && parentNode.loading)
			{
				window.setTimeout(function () {
					selectWhenLoaded(parentNode, contentId);
				}, 10);
			}
			else if(parentNode)
			{
				parentNode.expand();
				var addedNode = tree.getNodeWithMyId(contentId);
				addedNode.select();
			}
		}
		
		//var oldSelected;
		function htmlTreeItemClick(itemId, repoId, path)
		{
			// Call parent
			if(parent.htmlTreeItemClick)
				parent.htmlTreeItemClick(itemId, repoId, path);
			//openUrlInWorkArea("ViewContent!V3.action?contentId=" + itemId + "&repositoryId=" + repoId, path, "$ui.getString("tool.common.contentTabLabelPrefix")");
			//setSelected(itemId);
		}

		function openUrlInWorkArea(url, titel, tabLabelPrefix)
		{
			//alert("openUrlInWorkArea:" + url + " - " + titel);
			if(parent.openUrlInWorkArea)
				parent.openUrlInWorkArea(url, titel, tabLabelPrefix);
		}
		
		function selectVersion(contentId, languageId, contentVersionId)
		{
			parent.parent.frames['main'].location.href="ViewContentVersion.action?contentId=" + contentId + "&languageId=" + languageId + "&contentVersionId=" + contentVersionId;
			//setSelected(contentVersionId);
		}

		function markSelected(itemId)
		{
			var node = tree.getNodeWithMyId(itemId);
			if(node)
				node.select();
		}
		
		var ig_expanded_nodes_cookie = "igContentTreeExpansionForRepository${repositoryId}";
		
		function loaded()
		{
			//setSelected("${select}");
			
			path = webFXTreeHandler.cookies.getCookie(ig_expanded_nodes_cookie);
			//alert("path:" + path);
			if(path && path != "")
			{
				path = path.substring(0, path.length - 1);
				var pathArr = path.split(',');
				
				expandTreeRec(pathArr, 0);
			}		
			
			setTimeout("markSelected('${select}')", 500);	
		}
		
		
		function expandTreeRec(pathArr, level)
		{			
			var node = tree.getNodeWithMyId(pathArr[level]);
			
			if(node == null)
				return;
			
			if(!node.loading && node.parentNode != null)
			{
				//alert("Loading child to " + node.text + ":" + node.id + ":" + node.myId + !node.loaded + ":" + !node.loading);
				if (!node.loaded && !node.loading && node.src) {
					_startLoadXmlTree(node.src, node);
				}
				
				if (webFXTreeHandler.behavior == 'classic') { 
					//--document.getElementById(node.id + '-icon').src = node.openIcon; 
				}
				if (node.childNodes.length) {  document.getElementById(node.id + '-cont').style.display = 'block'; }
				node.open = true;
				//--document.getElementById(node.id + '-plus').src = node.minusIcon;
				$("#" + node.id + '-plus').removeClass("lContractable").removeClass("lExpandable").addClass("lContractable");
				
				node.deSelect();
				document.getElementById(node.id + '-anchor').blur();
			 	//node.expand();
			}
						
			if(node.loading && !node.loaded) 
			{
				//alert("loading with level:" + level + " and " + pathArr.length);
				if(level < pathArr.length)
				{
					window.setTimeout(function () {
						expandTreeRec(pathArr, level);
					}, 10);
				}
			}
			else
			{
				//alert("not loading");
				if(level < pathArr.length)
				{
					expandTreeRec(pathArr, level+1);
				}
			}
		}
		
		function showContextMenu(element, e, aWindow)
		{
    		//alert("e:" + e);
			//alert("element:" + element);

			if(!e)
		        e = window.event;

			if(parent && parent.showContextMenu)
				return parent.showContextMenu("ViewContentToolAjaxServices.action?contentId=" + element, e, aWindow);
			if(parent.parent && parent.parent.showContextMenu)
				return parent.parent.showContextMenu("ViewContentToolAjaxServices.action?contentId=" + element, e, aWindow);
			else if(top.showContextMenu)
				return top.showContextMenu("ViewContentToolAjaxServices.action?contentId=" + element, e, aWindow);
			else
			{
    			var clientX = getEventPositionX(e);
    			var clientY = getEventPositionY(e);
    			
    			var rightedge = document.body.clientWidth - clientX;
    			var bottomedge = getWindowHeight() - clientY;
    	
    			var menuDiv = document.getElementById("contextMenuDiv");
    			
    			if (rightedge < menuDiv.offsetWidth)
            		clientX = (clientX - menuDiv.offsetWidth);
            	
            	if (bottomedge < menuDiv.offsetHeight && (clientY - menuDiv.offsetHeight > 0))
            		clientY = (clientY - menuDiv.offsetHeight);
            		
            	menuDiv.style.left 	= clientX + "px";
            	menuDiv.style.top 	= clientY + "px";
            	
    			$("#contextMenuDiv").show();
    	
    			return false;
			}
		}
		
		function moveNode(contentId, newParentContentId, oldParentContentId)
		{
			jQuery.get("MoveContent!ajax.action", { contentId:"" + contentId, newParentContentId:"" + newParentContentId }, function(data){
			  	//alert("Moved: " + data + ":" + oldParentContentId + " - " + newParentContentId);
			  	parent.refreshContent(oldParentContentId, 4, null);
			  	parent.refreshContent(newParentContentId, 4, null);
			});
		}
		
		function treeResized()
		{
			if(parent.resizeTreeIframe)
				parent.resizeTreeIframe($("#treeDiv").height() + 10, $("#treeDiv").width() + 20);
		}
		
		// -->
	</script>

	<!-- DYNAMIC VERSION SCRIPTS -->
	<script type="text/javascript">
		var defaultWorkingStyleInformation = "$this.workingStyleInformation";
		var defaultFinalStyleInformation = "$this.finalStyleInformation";
		var defaultPublishStyleInformation = "$this.publishStyleInformation";
		var defaultPublishedStyleInformation = "$this.publishedStyleInformation";
		window.movePageWarning = "$ui.getString("tool.contenttool.moveContent.areYouSureWarning")";
	</script>
	<script type="text/javascript" src="script/v3/infoglue.js"></script>
	<script type="text/javascript" src="script/xloadtree/xtree.js"></script>
	<script type="text/javascript" src="script/xloadtree/xmlextras.js"></script>
	<script type="text/javascript" src="script/xloadtree/xloadtree.js"></script>
	<!-- END -->

	<link rel="stylesheet" type="text/css" href="css/infoglue.css" />

	<link type="text/css" rel="stylesheet" href="script/xloadtree/xtree.css" />
	<link rel="stylesheet" type="text/css" href="css/menu.css" />
	<link rel="stylesheet" type="text/css" href="css/skins/${theme}/menu.css" />
</head>
<body oncontextmenu="return false;" class="generaltooledit" onload="if(parent.notifyIsLoaded)parent.notifyIsLoaded();if(parent.notifyExp)parent.notifyExp('${exp}');loaded();">

	<div id="treeDiv" class="contentTree">

	<!-- NEW DYNAMIC VERSION -->
	<script type="text/javascript">
	<!--	
	#if($disableCustomIcons != "true")
		#foreach($customContentTypeIcon in $customContentTypeIcons.entrySet())
			webFXTreeConfig.contentTypeIcons["$customContentTypeIcon.key"] = "$customContentTypeIcon.value";
		#end
	#end
		
	//webFXTreeConfig.rootIcon		= "css/images/tree/contentRoot.gif"; // "script/xloadtree/images/xp/folder.png";
	//webFXTreeConfig.openRootIcon	= "css/images/tree/contentRoot.gif"; // "script/xloadtree/images/xp/openfolder.png";
	webFXTreeConfig.rootIcon		= "script/xloadtree/images/xp/folder.png"; // "script/xloadtree/images/xp/folder.png";
	webFXTreeConfig.openRootIcon	= "script/xloadtree/images/xp/openfolder.png"; // "script/xloadtree/images/xp/openfolder.png";
	webFXTreeConfig.skinBasePath 	= "script/xloadtree/images/xp/";
	webFXTreeConfig.folderIcon		= "script/xloadtree/images/xp/folder.png";
	webFXTreeConfig.openFolderIcon	= "script/xloadtree/images/xp/openfolder.png";
	webFXTreeConfig.hiddenFolderIcon		= "script/xloadtree/images/xp/hiddenFolder.png";
	webFXTreeConfig.hiddenOpenFolderIcon	= "script/xloadtree/images/xp/hiddenOpenfolder.png";
	webFXTreeConfig.fileIcon		= "script/xloadtree/images/xp/file.png";
	webFXTreeConfig.lMinusIcon		= "script/xloadtree/images/xp/Lminus.png";
	webFXTreeConfig.lPlusIcon		= "script/xloadtree/images/xp/Lplus.png";
	webFXTreeConfig.tMinusIcon		= "script/xloadtree/images/xp/Tminus.png";
	webFXTreeConfig.tPlusIcon		= "script/xloadtree/images/xp/Tplus.png";
	webFXTreeConfig.iIcon			= "script/xloadtree/images/xp/I.png";
	webFXTreeConfig.lIcon			= "script/xloadtree/images/xp/L.png";
	webFXTreeConfig.tIcon			= "script/xloadtree/images/xp/T.png";
	webFXTreeConfig.showRoot		= true;
	webFXTreeConfig.loadingText		= "Loading content ...";
	
	var contentTypeNamesMapping = new Array();
	#foreach($contentTypeDefinitionVO in $this.getContentTypeDefinitions())
		contentTypeNamesMapping["$contentTypeDefinitionVO.id"] = "$contentTypeDefinitionVO.name.replaceAll(" ","").toLowerCase()";
	#end
	
	#set($par = "")
	#if($parent && $parent != "")
		#set($par = "&parent=${parent}")
	#else
		#set($par = "&parent=$rootNode.Id")
	#end 
		
	var tree = new WebFXLoadTree("$rootNode.Title", "SimpleContentXml.action?showLeafs=${showLeafs}&action=SimpleContentXml.action&createAction=true&repositoryId=$!{repositoryId}$par&$allowedContentTypeIdsAsUrlEncodedString", "javascript:htmlTreeItemClick('$rootNode.Id','${repositoryId}','$formatter.escapeExtendedHTML($rootNode.Title)');");
	tree.myId = "$rootNode.Id";
	document.write(tree);
	
	$("#" + tree.id + " a").droppable({
		hoverClass: 'ui-state-active',
		tolerance: 'pointer',
	    drop: function(event, ui) { 
			var dragEl = $(ui.draggable); 
			var movedNodeId = dragEl.attr("entityId");
			if(!movedNodeId)
				movedNodeId = $(dragEl).children("a").attr("entityId");
			
			var parentNodeId = dragEl.attr("parentEntityId");
			var newParentNodeId = $("#" + tree.id + " a").attr("entityId");
			//alert('dropped:' + movedNodeId + " on " + newParentNodeId);
			if(confirm(movePageWarning))
				moveNode(movedNodeId, newParentNodeId, parentNodeId);
		}
	});
	
	var oldSelected = null;
	oldSelected = "$rootNode.Id";
	//alert("${select}");
	#if($select == -1)
		$("[entityid='$rootNode.Id']").addClass("selected");
	#end
	
	function onTreeItemClick(elem, itemId, repoId, path)
	{
		if(oldSelected)
		{
			$("[entityid='$rootNode.Id']").removeClass("selected");
			oldSelected = null;
		}
		//if(oldSelected!=null) oldSelected.className="";
		//elem.className="selected";
		//oldSelected=elem;
		htmlTreeItemClick(itemId, repoId, path);

		elementString = elem.toString();
		startIndex = elementString.indexOf("(") + 1;
		endIndex = elementString.indexOf(")");
		nodeId = elementString.substring(startIndex, endIndex);
		var node = tree.getNodeWithMyId(nodeId);
		
		setTimeout(function () {
			if (node.folder) {
				if (!node.open) { node.expand(); }
				}			
			//webFXTreeHandler.toggle(node);
			}, 100);
	}
	
	function onTreeItemDblClick(id, label)
	{
		if(parent.treeItemDblClick)
			parent.treeItemDblClick(id, label);
	}
	
	function onTreeItemSelect(elem)
	{
		/*
		var aid = elem + "-anchor";
		if (oldSelected != null)
			oldSelected.className = "";
		
		var srcIdLink =	document.getElementById(aid);
		// alert(srcIdLink.className);
		oldSelected = srcIdLink;
		if (srcIdLink != null)
			srcIdLink.className = "selected";

		// alert(srcIdLink.className);
		*/
	}
		
    $(document).click(function () { 
    	if(parent.closeContextMenu)
			parent.closeContextMenu();
		else if(parent.parent.closeContextMenu)
			parent.parent.closeContextMenu();
    	else if(top.closeContextMenu)
			top.closeContextMenu();
   	});
	-->	
	</script>	

	</div>

</body>
</html>